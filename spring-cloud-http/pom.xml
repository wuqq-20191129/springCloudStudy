<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>springCloudStudy</artifactId>
        <groupId>com.wuqq</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>spring-cloud-http</artifactId>
    <properties>
        <docker.image.prefix>docker</docker.image.prefix>
    </properties>
    <packaging>jar</packaging>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
        </dependency>

        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>

        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
        </dependency>

        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
            <version>4.5.13</version>
        </dependency>

        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.62</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <!-- 可执行jar包                -->
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>2.4.3</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
<!--            <plugin>-->
<!--                <groupId>org.apache.maven.plugins</groupId>-->
<!--                <artifactId>maven-deploy-plugin</artifactId>-->
<!--                <version>${maven-deploy-plugin.version}</version>-->
<!--                <configuration>-->
<!--                    <skip>true</skip>-->
<!--                </configuration>-->
<!--            </plugin>-->

<!--            <plugin>-->
<!--                <groupId>com.spotify</groupId>-->
<!--                <artifactId>docker-maven-plugin</artifactId>-->
<!--                <version>1.2.2</version>-->
<!--                &lt;!&ndash; 绑定docker命令到 maven各个阶段 &ndash;&gt;-->
<!--                &lt;!&ndash; 解释：可以把 docker 分为 build、tag、push，然后分别绑定 Maven 的 package、deploy 阶段 &ndash;&gt;-->
<!--                <executions>-->
<!--                    <execution>-->
<!--                        <id>build-image</id>-->
<!--                        &lt;!&ndash; 这里将插件绑定在package这个操作上。用户只需执行mvn package ，就会自动执行mvn docker:build  相当于执行了mvn clean package docker:build &ndash;&gt;-->
<!--                        <phase>package</phase>-->
<!--                        <goals>-->
<!--                            <goal>build</goal>-->
<!--                        </goals>-->
<!--                    </execution>-->
<!--                </executions>-->
<!--                <configuration>-->
<!--                    &lt;!&ndash; imageName镜像名称需匹配[a-z0-9-_.]，否则构建不会成功 &ndash;&gt;-->
<!--                    <imageName>${docker.image.prefix}/${project.artifactId}</imageName>-->
<!--                    &lt;!&ndash; 指定Dockerfile文件路径，另外一种方式可直接在pom.xml配置对应的标签属性值 &ndash;&gt;-->
<!--                    <dockerDirectory>${project.basedir}/src/main/docker</dockerDirectory>-->
<!--                    &lt;!&ndash; build时，指定–rm=true即build完成后删除中间容器 &ndash;&gt;-->
<!--                    <rm>true</rm>-->
<!--                    &lt;!&ndash;指定标签&ndash;&gt;-->
<!--                    <imageTags>-->
<!--                        <imageTag>latest</imageTag>-->
<!--                    </imageTags>-->
<!--                    &lt;!&ndash;指定远程 docker 服务器ip地址&ndash;&gt;-->
<!--&lt;!&ndash;                    <dockerHost>http://172.20.16.53:2375</dockerHost>&ndash;&gt;-->
<!--                    &lt;!&ndash; 这里是复制jar包到docker容器指定目录配置 &ndash;&gt;-->
<!--                    <resources>-->
<!--                        <resource>-->
<!--                            <targetPath>/</targetPath>-->
<!--                            &lt;!&ndash; jar包所在的路径  此处配置的 即对应 target 目录 &ndash;&gt;-->
<!--                            <directory>${project.build.directory}</directory>-->
<!--                            &lt;!&ndash; 需要包含的 jar包 ，这里对应的是 Dockerfile中添加的文件名　&ndash;&gt;-->
<!--                            <include>${project.build.finalName}.jar</include>-->
<!--                        </resource>-->
<!--                    </resources>-->
<!--                </configuration>-->
<!--            </plugin>-->
        </plugins>
    </build>
</project>